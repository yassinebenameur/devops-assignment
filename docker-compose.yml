version: '3'
services:
  node-js-app:

    image: 127.0.0.1:5000/my-stack:latest
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      replicas: 3
      mode: replicated

    #      endpoint_mode: dnsrr
    ports:
      - "80:8080"
    env_file: .env
    depends_on:
      - mongo
    links:
      - mongo
    networks:
      my_network:


  mongo:
    image: mongo:4.1.8-xenial
    ports: 
      - "27017:27017"  
    container_name: db
    restart: unless-stopped
    env_file: .env
    volumes:
      - dbdata:/data/db
    networks:
      my_network:
#
#    deploy:
#      replicas: 2
#      mode: replicated
#      endpoint_mode: dnsrr

volumes:
  dbdata:
networks:
  my_network:


#version: '3'
#
#services:
#  nodejs:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    image: 127.0.0.1:5000/stackdemo
#    container_name: nodejs
#    restart: unless-stopped
#    env_file: .env
#    environment:
#      - MONGO_USERNAME=$MONGO_USERNAME
#      - MONGO_PASSWORD=$MONGO_PASSWORD
#      - MONGO_HOSTNAME=db
#      - MONGO_PORT=$MONGO_PORT
#      - MONGO_DB=$MONGO_DB
#    ports:
#      - "80:8080"
#    volumes:
#      - .:/home/node/app
#      - node_modules:/home/node/app/node_modules
#    command: ./wait-for.sh db:27017 -- /home/node/app/node_modules/.bin/nodemon app.js
#    deploy:
#      replicas: 3
#  db:
#    image: mongo:4.1.8-xenial
#    container_name: db
#    restart: unless-stopped
#    env_file: .env
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
#      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
#    volumes:
#      - dbdata:/data/db
#    deploy:
#      replicas: 2
#volumes:
#  dbdata:
#  node_modules:
